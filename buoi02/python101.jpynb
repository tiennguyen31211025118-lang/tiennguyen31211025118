{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [
        "eU1ComwFxDwK",
        "mz8LVIaMxM3E"
      ],
      "mount_file_id": "18TALbaAgd_JTlMP62cX_y8PT-gfiMYcq",
      "authorship_tag": "ABX9TyMPIKN/ooJaBPN8NiZO4u68",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/taido83/ueh25-ktlt-eco/blob/main/buoi02_250816/python101.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Python 101"
      ],
      "metadata": {
        "id": "dxE8XHohw7bx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Ngôn ngữ Python"
      ],
      "metadata": {
        "id": "eU1ComwFxDwK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VhFD9WmCkztl",
        "outputId": "dfcbc254-3bf5-4ffa-bf23-0a52c8404b4d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World!\n"
          ]
        }
      ],
      "source": [
        "print(\"Hello, World!\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pv = 100\n",
        "r = 0.1\n",
        "n = 7\n",
        "fv = pv * ((1 + r)**n)\n",
        "print(round(fv, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WtudoGVSlQB3",
        "outputId": "e8fe185f-500a-4c95-d832-c52f046adac7"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "194.87\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "amount = 100\n",
        "interest = 10\n",
        "years = 7\n",
        "\n",
        "future_value = amount * ((1 + 0.01 * interest)**years)\n",
        "print(round(future_value, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m8drA9kOmjUs",
        "outputId": "cc99af0c-288f-4ee1-ed43-fe56204aef01"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "194.87\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display"
      ],
      "metadata": {
        "id": "lvlga0nZn2lr"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Hello, World\")\n",
        "display(\"Hello, World!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 53
        },
        "id": "duESvYa9nUp7",
        "outputId": "ea012e5e-b0fb-419b-82bf-257bf5741fab"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "'Hello, World!'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ghi chu\n",
        "'''\n",
        "Ghi chu\n",
        "'''\n",
        "print(\"Comment\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FI-Wm4X3oAye",
        "outputId": "aead4435-b7c6-45d4-eb76-04a2e98b9d36"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Comment\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "score = 80\n",
        "if score >= 60:\n",
        "    print(\"Pass\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8WFIGpX_oSkK",
        "outputId": "ba142c6a-e3f3-4d72-906a-d1e7cc34b57b"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pass\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Python variables\n",
        "x = 2\n",
        "price = 2.5\n",
        "word = 'Hello'\n",
        "\n",
        "word = 'Hello'\n",
        "word = \"Hello\"\n",
        "word = '''Hello'''\n",
        "print(x, price, word)\n",
        "print(f'x = {x, type(x)}, price={price, type(price)}, word={word, type(word)}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fI4VmLz0oflt",
        "outputId": "99e387fa-d7a4-49cc-ce64-482fbc649924"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2 2.5 Hello\n",
            "x = (2, <class 'int'>), price=(2.5, <class 'float'>), word=('Hello', <class 'str'>)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 2\n",
        "y = x + 1\n",
        "print(x, y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "olaY5O0Fp9dh",
        "outputId": "29da177e-b075-443a-ddca-6232da802ffe"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# comment\n",
        "from platform import python_version\n",
        "print(\"Python version: \", python_version())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ltSPs2u7qHWE",
        "outputId": "ae278d52-fc94-4b0d-e299-cb82bb98757f"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Python version:  3.11.13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "help(python_version)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hd-o4bBxqYvj",
        "outputId": "e2e503a8-3383-48db-94a4-680b99706fc2"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function python_version in module platform:\n",
            "\n",
            "python_version()\n",
            "    Returns the Python version as string 'major.minor.patchlevel'\n",
            "    \n",
            "    Note that unlike the Python sys.version, the returned value\n",
            "    will always include the patchlevel (it defaults to 0).\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = 'Hello, World'\n",
        "print(x, type(x))\n",
        "\n",
        "x = 2\n",
        "print(x, type(x))\n",
        "\n",
        "x = 2.5\n",
        "print(x, type(x))\n",
        "\n",
        "x = 7j\n",
        "print(x, type(x))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c5XUXYW4qgV4",
        "outputId": "de8f0e2a-e38f-4270-b514-d6badede4a1e"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World <class 'str'>\n",
            "2 <class 'int'>\n",
            "2.5 <class 'float'>\n",
            "7j <class 'complex'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = ['apple', 'banana', 'cherry']\n",
        "x.append('hello')\n",
        "print(x, type(x), x[1:3])\n",
        "\n",
        "x = ('apple', 'banana', 'cherry') # immutable\n",
        "# x.append('hello')\n",
        "x = ('apple', 'banana', 'cherry', 'hello')\n",
        "print(x, type(x), x[1:3])\n",
        "\n",
        "x = {'name': 'Tome', 'age': 20}   # dictionary\n",
        "print(x, type(x), x['name'], x['age'])\n",
        "\n",
        "x = {'apple', 'banana', 'cherry'} # set\n",
        "x.add('hello')\n",
        "print(x, type(x))\n",
        "\n",
        "x = frozenset({'apple', 'banana', 'cherry'}) # frozenset\n",
        "print(x, type(x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LarivM9trRT9",
        "outputId": "8e11d8da-d88a-4791-8f13-f6bf86ae6d2e"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['apple', 'banana', 'cherry', 'hello'] <class 'list'> ['banana', 'cherry']\n",
            "('apple', 'banana', 'cherry', 'hello') <class 'tuple'> ('banana', 'cherry')\n",
            "{'name': 'Tome', 'age': 20} <class 'dict'> Tome 20\n",
            "{'banana', 'apple', 'hello', 'cherry'} <class 'set'>\n",
            "frozenset({'banana', 'apple', 'cherry'}) <class 'frozenset'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = True\n",
        "print(x, type(x))\n",
        "\n",
        "x = b'Hello'  # bytes\n",
        "print(x, type(x))\n",
        "\n",
        "x = bytearray(5)  # bytearray\n",
        "print(x, type(x))\n",
        "\n",
        "x = memoryview(bytes(5))  # memoryview\n",
        "print(x, type(x), hex(id(x)))\n",
        "\n",
        "x = None # NoneType\n",
        "print(x, type(x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xgTYAGzCsuNV",
        "outputId": "6d80624d-9d51-4560-a54f-63ed70a7f8db"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True <class 'bool'>\n",
            "b'Hello' <class 'bytes'>\n",
            "bytearray(b'\\x00\\x00\\x00\\x00\\x00') <class 'bytearray'>\n",
            "<memory at 0x794ca66c6e00> <class 'memoryview'> 0x794ca66c6e00\n",
            "None <class 'NoneType'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# casting\n",
        "x = str(3)\n",
        "y = int(4.3)\n",
        "z = float(3)\n",
        "\n",
        "print(x, type(x))\n",
        "print(y, type(y))\n",
        "print(z, type(z))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SprvAtmRtdsQ",
        "outputId": "4757d60c-4ac5-428d-ce50-a251c8188bb2"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3 <class 'str'>\n",
            "4 <class 'int'>\n",
            "3.0 <class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# numbers\n",
        "x = 2\n",
        "print(x, type(x))\n",
        "\n",
        "y = 3.4\n",
        "print(y, type(y))\n",
        "\n",
        "z = 7j + 3.5\n",
        "print(z, type(z))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GpeHVt_Ot2CM",
        "outputId": "650cdd8f-0dc5-405c-9ccb-06bf8015aa01"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2 <class 'int'>\n",
            "3.4 <class 'float'>\n",
            "(3.5+7j) <class 'complex'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Operator\n",
        "print(7+2)\n",
        "print(7-2)\n",
        "print(7*2)\n",
        "print(7 / 2)\n",
        "print(7 // 2)\n",
        "print(7 % 2)\n",
        "print(7**2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OA4LNHSluSRR",
        "outputId": "662d29ef-2639-400c-ecf1-91bcc8a93a72"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "9\n",
            "5\n",
            "14\n",
            "3.5\n",
            "3\n",
            "1\n",
            "49\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Comparision\n",
        "print(3 > 2)\n",
        "print(3 == 2)\n",
        "print(3 < 2)\n",
        "print(3 != 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bXS2Ny4KunT0",
        "outputId": "62429416-d682-4111-9f3c-d4851a9e8a17"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# bmi\n",
        "# input\n",
        "height_cm = 170\n",
        "weight_kg = 60\n",
        "\n",
        "# process\n",
        "height_m = height_cm / 100\n",
        "bmi = (weight_kg / (height_m ** 2))\n",
        "print('Your BMI is ', round(bmi, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fiirNRdfu19i",
        "outputId": "afd99c2a-d18e-4b5f-849d-f65ba13313a3"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Your BMI is  20.76\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 100$ sau 7 nam\n",
        "fv = 100 * (1 + 0.1) ** 7\n",
        "print('fv = ', round(fv, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9jlujiljvf3q",
        "outputId": "9bf185e9-526a-4a91-b98f-ed33250d4932"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fv =  194.87\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# input\n",
        "pv = 100\n",
        "r  = 0.1\n",
        "n  = 7\n",
        "\n",
        "# process\n",
        "fv  = pv * ((1 + r)**n)\n",
        "print('fv = ', round(fv, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fRhUU69DvshN",
        "outputId": "7b5a66a5-3989-4430-ed02-ae3d3b9f746d"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fv =  194.87\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# input\n",
        "amount = 100\n",
        "interest = 10 # 10%\n",
        "years = 7\n",
        "\n",
        "# process\n",
        "future_value = amount * ( (1 + interest / 100.0) ** years)\n",
        "print('future_value = ', round(future_value, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7ir87XGxwEZz",
        "outputId": "e914f40a-e2a3-4ed4-a3b0-722f02c3f966"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "future_value =  194.87\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "mT2AywYrwhNh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cấu trúc dữ liệu"
      ],
      "metadata": {
        "id": "mz8LVIaMxM3E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = ['apple', 'banana', 'cherry'] # list\n",
        "print(x, type(x))\n",
        "x = ('apple', 'banana', 'cherry') # tuple\n",
        "print(x, type(x))\n",
        "x = {'name': 'Tome', 'age': 20}   # dictionary\n",
        "print(x, type(x))\n",
        "x = {'apple', 'banana', 'cherry'} # set\n",
        "print(x, type(x))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FaIn3xh2xPN0",
        "outputId": "7e9ed492-0ba0-46b6-fd1e-907f3796d8e6"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['apple', 'banana', 'cherry'] <class 'list'>\n",
            "('apple', 'banana', 'cherry') <class 'tuple'>\n",
            "{'name': 'Tome', 'age': 20} <class 'dict'>\n",
            "{'banana', 'apple', 'cherry'} <class 'set'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# List\n",
        "x = [60, 70, 80, 90]\n",
        "print(len(x))\n",
        "print(x[0])\n",
        "print(x[1])\n",
        "print(x[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tgNIS0FIxvVU",
        "outputId": "872e2b75-98d9-4c24-eb8b-459c6447152b"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4\n",
            "60\n",
            "70\n",
            "90\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# tuple\n",
        "x = (10, 20, 30, 40, 50)\n",
        "print(len(x))\n",
        "print(x[0])\n",
        "print(x[1])\n",
        "print(x[-1])\n",
        "# x[0] = 50 # error"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xtdK9ShGyPMY",
        "outputId": "c2bee723-6266-4b66-c667-d08b2c04a3df"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n",
            "10\n",
            "20\n",
            "50\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# set\n",
        "animals = {'cat', 'dog'}\n",
        "print('cat' in animals)\n",
        "print('fish' in animals)\n",
        "animals.add('fish')\n",
        "print('fish' in animals)\n",
        "print(len(animals))\n",
        "animals.add('cat')\n",
        "print(len(animals))\n",
        "animals.remove('cat')\n",
        "print(len(animals))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JAx7yx6VyznT",
        "outputId": "e8225513-8f71-40d1-96ba-abe9da603b51"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n",
            "3\n",
            "3\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# dictionary\n",
        "k = {'EN': 'English', 'FR': 'French'}\n",
        "print(k['EN'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TmI6ZDZ0zUXF",
        "outputId": "92b0efe2-184c-4c5b-b54d-da4c895befcb"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "English\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# data types\n",
        "fruits = ['apple', 'banana', 'cherry']  # list []\n",
        "colors = ('red', 'green', 'blue')       # tuple ()\n",
        "animals = {'cat', 'dog'}                # set {}\n",
        "person = {'name': 'Tom', 'age': 20}     # dict{k:v}"
      ],
      "metadata": {
        "id": "qT4y-bKCz7R6"
      },
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# lists\n",
        "expenses = [72.5, 80.75, 50.0, 90.25]\n",
        "total_expenses = sum(expenses)\n",
        "print('Total expenses = ', total_expenses)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gSOxll3-0Rh6",
        "outputId": "c88c56b6-7e49-4b1d-a7fe-27729c813393"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total expenses =  293.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# tuples\n",
        "accounts = (('Cash', 1001), ('Accounts Receivable', 1002), ('Inventory', 1003))\n",
        "for account in accounts:\n",
        "  print('Account Name: ', account[0], ' - Account Number: ', account[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MNKr09CA0r2N",
        "outputId": "756a6bed-a8da-4ddc-8389-ae90f57ff7d0"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Account Name:  Cash  - Account Number:  1001\n",
            "Account Name:  Accounts Receivable  - Account Number:  1002\n",
            "Account Name:  Inventory  - Account Number:  1003\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# set\n",
        "account_numbers = set([acc[1] for acc in accounts]) # set comprehensive\n",
        "print(account_numbers)\n",
        "new_acc_number = 1004\n",
        "if new_acc_number not in account_numbers:\n",
        "  print(f'Account number {new_acc_number} is not in use')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yA5DdmO61Jxa",
        "outputId": "9a32693d-97cd-4c8c-e85b-75105328381e"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{1001, 1002, 1003}\n",
            "Account number 1004 is not in use\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# dictionary\n",
        "accounts = {\n",
        "    \"1001\": {\"name\": \"Cash\", \"balance\": 500.0, \"type\": \"Asset\"},\n",
        "    \"1002\": {\"name\": \"Account Receivable\", \"balance\": 1000.0, \"type\": \"Asset\"},\n",
        "    \"1003\": {\"name\": \"Account Payable\", \"balance\": 750.0, \"type\": \"Liability\"},\n",
        "}\n",
        "\n",
        "for acc_num, acc_info in accounts.items():\n",
        "  print('-'*50)\n",
        "  print('Account Number: ', acc_num)\n",
        "\n",
        "  print('Account Name: ', acc_info['name'])\n",
        "  print('Account Balance: ', acc_info['balance'])\n",
        "  print('Account Type: ', acc_info['type'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MOSofh-_2YBo",
        "outputId": "dc493001-4b20-4ae9-e99a-75158de40159"
      },
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--------------------------------------------------\n",
            "Account Number:  1001\n",
            "Account Name:  Cash\n",
            "Account Balance:  500.0\n",
            "Account Type:  Asset\n",
            "--------------------------------------------------\n",
            "Account Number:  1002\n",
            "Account Name:  Account Receivable\n",
            "Account Balance:  1000.0\n",
            "Account Type:  Asset\n",
            "--------------------------------------------------\n",
            "Account Number:  1003\n",
            "Account Name:  Account Payable\n",
            "Account Balance:  750.0\n",
            "Account Type:  Liability\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Control Logic & Loops"
      ],
      "metadata": {
        "id": "BGnDkX0c4DBv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# if\n",
        "score = 80\n",
        "if score >= 60:\n",
        "  print('Pass')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GHCf9AsP4HIq",
        "outputId": "51f63019-02b8-4b6c-abd3-2892ed1c2ef9"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pass\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# if\n",
        "score = 80\n",
        "if score >= 60:\n",
        "  print('Pass')\n",
        "else: # score < 60\n",
        "  print('Fail')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hHF_Qlnn42jD",
        "outputId": "edf2cdbb-46e8-4f76-bb7c-587bd0950fd3"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pass\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# if\n",
        "score = 80\n",
        "if score >= 90:\n",
        "  print('A')\n",
        "elif score >= 60:  # score < 90 and score >=60\n",
        "  print('Pass')\n",
        "else: # score < 60\n",
        "  print('Fail')"
      ],
      "metadata": {
        "id": "olkVN9os5blk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# if\n",
        "score = 90\n",
        "grade = ''\n",
        "if score >= 90:  # [>90]\n",
        "  grade = 'A'\n",
        "elif score >= 80:  # score < 90 and score >=80 [80, 90)\n",
        "  grade = 'B'\n",
        "elif score >= 70:  # [70, 80)\n",
        "  grade = 'C'\n",
        "elif score >= 60:  # [60, 70)\n",
        "  grade = 'D'\n",
        "else: # score < 60\n",
        "  grade = 'E'\n",
        "print('Grade: ', grade)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gDu80Qow6Am5",
        "outputId": "22085ca4-9ece-4b18-8d86-ae653fbc866f"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Grade:  A\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# loop\n",
        "for i in range(1, 6): # 1<=i<6\n",
        "  print(i, end = ' ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8vAe2J_C6Gmk",
        "outputId": "3fa4e1ac-b3bb-477b-d962-b64f1c5456f7"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 2 3 4 5 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2 loop\n",
        "for i in range(1, 10): # i: 1->9\n",
        "    for j in range(1, 10): # j: 1->9\n",
        "       print(f'{i} * {j} = {i*j}')\n",
        "    print('-'*50)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FhwlRlD96U7b",
        "outputId": "d9446a1d-37ee-4cd2-dd9b-7730c893e6a8"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 * 1 = 1\n",
            "1 * 2 = 2\n",
            "1 * 3 = 3\n",
            "1 * 4 = 4\n",
            "1 * 5 = 5\n",
            "1 * 6 = 6\n",
            "1 * 7 = 7\n",
            "1 * 8 = 8\n",
            "1 * 9 = 9\n",
            "--------------------------------------------------\n",
            "2 * 1 = 2\n",
            "2 * 2 = 4\n",
            "2 * 3 = 6\n",
            "2 * 4 = 8\n",
            "2 * 5 = 10\n",
            "2 * 6 = 12\n",
            "2 * 7 = 14\n",
            "2 * 8 = 16\n",
            "2 * 9 = 18\n",
            "--------------------------------------------------\n",
            "3 * 1 = 3\n",
            "3 * 2 = 6\n",
            "3 * 3 = 9\n",
            "3 * 4 = 12\n",
            "3 * 5 = 15\n",
            "3 * 6 = 18\n",
            "3 * 7 = 21\n",
            "3 * 8 = 24\n",
            "3 * 9 = 27\n",
            "--------------------------------------------------\n",
            "4 * 1 = 4\n",
            "4 * 2 = 8\n",
            "4 * 3 = 12\n",
            "4 * 4 = 16\n",
            "4 * 5 = 20\n",
            "4 * 6 = 24\n",
            "4 * 7 = 28\n",
            "4 * 8 = 32\n",
            "4 * 9 = 36\n",
            "--------------------------------------------------\n",
            "5 * 1 = 5\n",
            "5 * 2 = 10\n",
            "5 * 3 = 15\n",
            "5 * 4 = 20\n",
            "5 * 5 = 25\n",
            "5 * 6 = 30\n",
            "5 * 7 = 35\n",
            "5 * 8 = 40\n",
            "5 * 9 = 45\n",
            "--------------------------------------------------\n",
            "6 * 1 = 6\n",
            "6 * 2 = 12\n",
            "6 * 3 = 18\n",
            "6 * 4 = 24\n",
            "6 * 5 = 30\n",
            "6 * 6 = 36\n",
            "6 * 7 = 42\n",
            "6 * 8 = 48\n",
            "6 * 9 = 54\n",
            "--------------------------------------------------\n",
            "7 * 1 = 7\n",
            "7 * 2 = 14\n",
            "7 * 3 = 21\n",
            "7 * 4 = 28\n",
            "7 * 5 = 35\n",
            "7 * 6 = 42\n",
            "7 * 7 = 49\n",
            "7 * 8 = 56\n",
            "7 * 9 = 63\n",
            "--------------------------------------------------\n",
            "8 * 1 = 8\n",
            "8 * 2 = 16\n",
            "8 * 3 = 24\n",
            "8 * 4 = 32\n",
            "8 * 5 = 40\n",
            "8 * 6 = 48\n",
            "8 * 7 = 56\n",
            "8 * 8 = 64\n",
            "8 * 9 = 72\n",
            "--------------------------------------------------\n",
            "9 * 1 = 9\n",
            "9 * 2 = 18\n",
            "9 * 3 = 27\n",
            "9 * 4 = 36\n",
            "9 * 5 = 45\n",
            "9 * 6 = 54\n",
            "9 * 7 = 63\n",
            "9 * 8 = 72\n",
            "9 * 9 = 81\n",
            "--------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# while\n",
        "age = 10\n",
        "while age < 20:\n",
        "  print(age, end = \" \")\n",
        "  age = age + 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_K2-Sv7dCkkk",
        "outputId": "acf0d63b-ab54-4031-c5cc-a6f999809826"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 11 12 13 14 15 16 17 18 19 "
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Module & Function"
      ],
      "metadata": {
        "id": "Be1kbpeuC7w7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# function\n",
        "def getfv(pv, r, n):\n",
        "  fv = pv * ((1 + r) ** n)\n",
        "  return fv\n",
        "  pass\n",
        "\n",
        "fv = getfv(100, 0.1, 7)\n",
        "print('Future value = ', round(fv, 2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TrGkJSxyC-wo",
        "outputId": "790e88ca-3d87-4f13-a125-2a3dd6767017"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Future value =  194.87\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# class: properties (variables) + methods (functions)\n",
        "class MyClass:\n",
        "  x = 5\n",
        "\n",
        "c1 = MyClass()\n",
        "print(c1.x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TrNUXGFtDcLA",
        "outputId": "d4c76ce5-7d5f-488e-d116-0135bdc47336"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# class\n",
        "class Person:\n",
        "  def __init__(self, name, age): # constructor (ham tao doi tuong)\n",
        "    self.name = name\n",
        "    self.age = age\n",
        "\n",
        "p1 = Person('Alan', 20)\n",
        "print(p1.name, p1.age)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QFlXGwLMDy3O",
        "outputId": "1a73092b-6fa8-4703-9e98-4b9d228d0d86"
      },
      "execution_count": 111,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alan 20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# class\n",
        "class Person:\n",
        "  def __init__(self, name, age): # constructor (ham tao doi tuong)\n",
        "    self.name = name\n",
        "    self.age = age\n",
        "\n",
        "  def myfunc(self):\n",
        "    print('Hello my name is ', self.name)\n",
        "    pass\n",
        "\n",
        "p1 = Person('Alan', 20)\n",
        "print(p1.name, p1.age)\n",
        "p1.myfunc()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FV6hH1lNEbfO",
        "outputId": "4302a550-50e2-40af-9438-97b52bc7f06a"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Alan 20\n",
            "Hello my name is  Alan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Vehicle:\n",
        "  name = \"\"\n",
        "  kind = \"car\"\n",
        "  color = \"\"\n",
        "  value = 100.0\n",
        "\n",
        "  def __init__(self, name=\"\", kind=\"car\", color=\"\", value=100.0):\n",
        "    self.name = name\n",
        "    self.kind = kind\n",
        "    self.color = color\n",
        "    self.value = value\n",
        "    pass\n",
        "\n",
        "  def description(self):\n",
        "    desc_str = f'{self.name} is a {self.color} {self.kind} worth ${self.value:.2f}.'\n",
        "    return desc_str\n",
        "    pass\n",
        "\n",
        "car1 = Vehicle()\n",
        "car1.name = 'Fer'\n",
        "car1.color = 'red'\n",
        "car1.kind = 'convertible'\n",
        "car1.value = 60000.0\n",
        "\n",
        "car2 = Vehicle(\"Jump\", 'blue', 'van', 10000.0)\n",
        "\n",
        "print(car1.description())\n",
        "print(car2.description())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VtorxKdDE0lR",
        "outputId": "b1f08178-f2d3-4b3a-d523-bef176bf332b"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fer is a red convertible worth $60000.00.\n",
            "Jump is a van blue worth $10000.00.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile mymodule.py\n",
        "def greeting(name):\n",
        "  print(\"Hello, \", name)\n",
        "\n",
        "def greeting_vn(name):\n",
        "  print(\"Xin Chao, \", name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DH7LptLWGngc",
        "outputId": "ec4a7ec4-6b66-4880-f4b9-9893dcbb4d23"
      },
      "execution_count": 129,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting mymodule.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!cat mymodule.py"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ml9hueX6HAQG",
        "outputId": "47c3d901-906e-49bd-f5fa-91673d603ec0"
      },
      "execution_count": 132,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "def greeting(name):\n",
            "  print(\"Hello, \", name)\n",
            "\n",
            "def greeting_vn(name):\n",
            "  print(\"Xin Chao, \", name)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import mymodule as m1\n",
        "import importlib\n",
        "importlib.reload(m1)\n",
        "m1.greeting('Alan')\n",
        "m1.greeting_vn('Alan')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YF07M-3JHJL6",
        "outputId": "fb6a4f0e-ab4c-4dbe-c13c-80bb28d9aee3"
      },
      "execution_count": 139,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello,  Alan\n",
            "Xin Chao,  Alan\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Read/Write File"
      ],
      "metadata": {
        "id": "Kgcd92ntH4fB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "with open('a.txt', 'w') as file:\n",
        "  file.write('Hello, World\\nThis is demo input/output')\n",
        "\n",
        "!cat a.txt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r_QIlFeOH7fD",
        "outputId": "4b4193f3-971a-45fc-87a2-af0aa3c68acc"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, World\n",
            "This is demo input/output"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "with open('a.txt', 'r') as file:\n",
        "  print(file.readlines())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mCk1_0GhIJby",
        "outputId": "0106f100-c626-41c4-8759-f99eea8337f1"
      },
      "execution_count": 142,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Hello, World\\n', 'This is demo input/output']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile demo.py\n",
        "def main():\n",
        "  print('Hello, World!')\n",
        "\n",
        "print(__name__)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jbwxEqSCIeey",
        "outputId": "2a4da087-4787-4fd4-e13c-a9ed9cf63c64"
      },
      "execution_count": 144,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting demo.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%run demo.py"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AMy0pK6MIuSg",
        "outputId": "a07e3dff-1c95-4ea8-80a6-2a58e9b8f075"
      },
      "execution_count": 145,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "__main__\n",
            "Hello, World!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import demo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cnYko-5gI2xZ",
        "outputId": "d2d87283-da46-499d-84a9-5b0d67faeda1"
      },
      "execution_count": 146,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "demo\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Try, Except & File Handling"
      ],
      "metadata": {
        "id": "vvyj0qKdJMqh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "  f = open('aa.txt')\n",
        "  f.close()\n",
        "except: # neu loi\n",
        "  print('File Error')\n",
        "  pass\n",
        "finally: # khong loi + loi deu xuong\n",
        "  print('Final')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "njVSQLn-JQYk",
        "outputId": "096b725c-5827-4004-f482-380cb54b9f92"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "File Error\n",
            "Final\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!ls /content/drive/MyDrive/\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W6KuvHTBJwuK",
        "outputId": "6f61d8e8-2851-4c36-eadb-722a4fb5c022"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'Colab Notebooks'   dntai   results\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "print(os.getcwd()) # lay thu muc hien tai dang dung\n",
        "print(os.listdir(os.getcwd()))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q_uKI92TKAvB",
        "outputId": "3c1e2b55-599b-47c6-de24-30a31914dedc"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content\n",
            "['.config', 'demo.py', '__pycache__', 'a.txt', 'drive', 'mymodule.py', 'sample_data']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "path = os.path.join(os.getcwd(), 'sample_data')\n",
        "print(path)\n",
        "print(os.listdir(path))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rwZufFkOKQQf",
        "outputId": "b2dcab39-1df1-4be5-d8cf-27fe54135b97"
      },
      "execution_count": 166,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/sample_data\n",
            "['anscombe.json', 'README.md', 'mnist_train_small.csv', 'mnist_test.csv', 'california_housing_test.csv', 'california_housing_train.csv']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import glob"
      ],
      "metadata": {
        "id": "aQY7ZiriKwQt"
      },
      "execution_count": 167,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "glob.glob('/content/sample_data/*.csv')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WFgtYQlWKx-H",
        "outputId": "4ed3f778-88a1-4df8-f4a3-273f59a0747f"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['/content/sample_data/mnist_train_small.csv',\n",
              " '/content/sample_data/mnist_test.csv',\n",
              " '/content/sample_data/california_housing_test.csv',\n",
              " '/content/sample_data/california_housing_train.csv']"
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Kết thúc"
      ],
      "metadata": {
        "id": "VtjwjZ81xQCo"
      }
    }
  ]
}
